name: nezha-v1-docker-ghcr

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 20 * * 6'  # Asia/Shanghai 每周天凌晨4点

env:
  GHCR_USERNAME: ${{ github.actor }}  # 使用GitHub用户名
  GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub自动生成的token
  DOCKER_IMAGE_NAME: "argo-nezha-v1"
  GITHUB_REPO: "nezhahq/nezha"
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get latest release tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/${{ env.GITHUB_REPO }}/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Get current GHCR image version
        id: get_current_version
        run: |
          CURRENT_TAG=$(curl -s -H "Authorization: Bearer ${{ env.GHCR_TOKEN }}" \
                       "https://ghcr.io/v2/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}/tags/list" | \
                       jq -r '.tags[] | select(. != "latest")' | sort -V | tail -n 1)
          if [ -z "$CURRENT_TAG" ]; then
            CURRENT_TAG="0.0.0"
          fi
          echo "当前GHCR镜像版本: $CURRENT_TAG"
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare_versions
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          CURRENT_TAG="${{ steps.get_current_version.outputs.current_tag }}"

          LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
          CURRENT_VERSION=$(echo "$CURRENT_TAG" | sed 's/^v//')

          HIGHER_VERSION=$(echo -e "$LATEST_VERSION\n$CURRENT_VERSION" | sort -V | tail -n 1)

          if [[ "$HIGHER_VERSION" == "$LATEST_VERSION" && "$LATEST_VERSION" != "$CURRENT_VERSION" ]]; then
            echo "新版本可用，继续..."
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "没有可用的新版本，停止..."
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.compare_versions.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        if: steps.compare_versions.outputs.should_build == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USERNAME }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Build and push Docker image to GHCR
        if: steps.compare_versions.outputs.should_build == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.latest_tag }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Send Telegram notification
        if: steps.compare_versions.outputs.should_build == 'true'
        env:
          GHCR_IMAGE_URL: https://ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
        run: |
          MESSAGE="新的 ${{ env.DOCKER_IMAGE_NAME }} 镜像已推送到GHCR 🚀%0A%0A"
          MESSAGE+="版本: ${{ steps.get_latest_tag.outputs.latest_tag }}%0A"
          MESSAGE+="镜像地址: $GHCR_IMAGE_URL"
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ env.TELEGRAM_CHAT_ID }}" \
            -d text="$MESSAGE"
            
  cleanup-runs:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      actions: write
      contents: read
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 6
